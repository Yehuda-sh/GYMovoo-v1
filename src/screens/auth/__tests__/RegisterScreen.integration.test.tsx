/**
 * @file src/screens/auth/__tests__/RegisterScreen.integration.test.tsx
 * @description בדיקת אינטגרציה בין RegisterScreen ל-localDataService
 * @description Integration test between RegisterScreen and localDataService
 */

import { localDataService } from "../../../services/localDataService";
import { User } from "../../../types/index";

describe("RegisterScreen Integration with localDataService", () => {
  beforeEach(() => {
    // נקה נתונים מקומיים לפני כל בדיקה
    const users = localDataService.getUsers();
    users.forEach((user) => {
      // אין מתודת delete, אבל נוכל לבדוק שהם נוספים נכון
    });
  });

  describe("User Registration Data Flow", () => {
    it("should save user to localDataService during registration", () => {
      const testUser: User = {
        email: "test@example.com",
        name: "Test User",
        id: "test_user_123",
        provider: "manual",
      };

      // בדיקה שהמשתמש לא קיים מראש
      const usersBefore = localDataService.getUsers();
      const existingUser = usersBefore.find((u) => u.email === testUser.email);
      expect(existingUser).toBeUndefined();

      // הוספת המשתמש
      const savedUser = localDataService.addUser(testUser);
      expect(savedUser).toBeDefined();
      expect(savedUser.email).toBe(testUser.email);
      expect(savedUser.name).toBe(testUser.name);

      // בדיקה שהמשתמש נשמר
      const usersAfter = localDataService.getUsers();
      const newUser = usersAfter.find((u) => u.email === testUser.email);
      expect(newUser).toBeDefined();
      expect(newUser?.email).toBe(testUser.email);
      expect(newUser?.name).toBe(testUser.name);
      expect(newUser?.provider).toBe("manual");
    });

    it("should handle Google registration data correctly", () => {
      const googleUser: User = {
        email: "google@example.com",
        name: "Google User",
        id: "google_user_123",
        provider: "google",
        questionnaire: { 1: "answer1", 2: "answer2" },
        questionnaireData: {
          answers: ["answer1", "answer2"],
          completedAt: new Date().toISOString(),
          version: "1.0",
          metadata: {
            generatedRandomly: true,
            googleSignIn: true,
            autoGenerated: true,
          },
        },
      };

      const savedUser = localDataService.addUser(googleUser);
      expect(savedUser).toBeDefined();
      expect(savedUser.provider).toBe("google");
      expect(savedUser.questionnaire).toBeDefined();
      expect(savedUser.questionnaireData).toBeDefined();

      const users = localDataService.getUsers();
      const retrievedUser = users.find((u) => u.email === googleUser.email);
      expect(retrievedUser).toBeDefined();
      expect(retrievedUser?.questionnaire).toEqual(googleUser.questionnaire);
    });

    it("should allow quick login after registration", () => {
      // צור משתמש כמו שRegisterScreen עושה
      const registeredUser: User = {
        email: "quicklogin@example.com",
        name: "Quick Login User",
        id: "quick_123",
        provider: "manual",
      };

      localDataService.addUser(registeredUser);

      // בדוק שההתחברות המהירה עובדת (כמו ב-WelcomeScreen)
      const users = localDataService.getUsers();
      expect(users.length).toBeGreaterThan(0);

      const firstUser = users[0];
      expect(firstUser).toBeDefined();
      expect(firstUser.email).toBeDefined();
      expect(firstUser.name).toBeDefined();
    });

    it("should preserve user data structure", () => {
      const userWithFullData: User = {
        email: "fulldata@example.com",
        name: "Full Data User",
        id: "fulldata_123",
        provider: "manual",
        preferences: {
          theme: "light",
          notifications: true,
          language: "he",
          gender: "other",
        },
        trainingStats: {
          totalWorkouts: 0,
          fitnessGoals: ["strength"],
          currentFitnessLevel: "beginner",
        },
      };

      const savedUser = localDataService.addUser(userWithFullData);
      expect(savedUser.preferences).toBeDefined();
      expect(savedUser.preferences?.theme).toBe("light");
      expect(savedUser.preferences?.language).toBe("he");
      expect(savedUser.trainingStats).toBeDefined();
      expect(savedUser.trainingStats?.currentFitnessLevel).toBe("beginner");
    });
  });

  describe("Data Validation", () => {
    it("should handle duplicate emails correctly", () => {
      const user1: User = {
        email: "duplicate@example.com",
        name: "First User",
        id: "user1_123",
        provider: "manual",
      };

      const user2: User = {
        email: "duplicate@example.com",
        name: "Second User",
        id: "user2_123",
        provider: "google",
      };

      // הוסף משתמש ראשון
      localDataService.addUser(user1);

      // נסה להוסיף משתמש שני עם אותו email
      const result = localDataService.addUser(user2);

      // localDataService צריך להחזיר את המשתמש השני (או לטפל בכפילות)
      expect(result).toBeDefined();

      const users = localDataService.getUsers();
      // בדוק שיש לפחות משתמש אחד עם ה-email הזה
      const usersWithEmail = users.filter(
        (u) => u.email === "duplicate@example.com"
      );
      expect(usersWithEmail.length).toBeGreaterThanOrEqual(1);
    });

    it("should maintain data integrity across operations", () => {
      const testUsers: User[] = [
        {
          email: "integrity1@example.com",
          name: "Integrity User 1",
          id: "integrity1_123",
          provider: "manual",
        },
        {
          email: "integrity2@example.com",
          name: "Integrity User 2",
          id: "integrity2_123",
          provider: "google",
        },
      ];

      // הוסף מספר משתמשים
      testUsers.forEach((user) => {
        localDataService.addUser(user);
      });

      // בדוק שכולם נשמרו נכון
      const savedUsers = localDataService.getUsers();
      expect(savedUsers.length).toBeGreaterThanOrEqual(testUsers.length);

      testUsers.forEach((originalUser) => {
        const foundUser = savedUsers.find(
          (u) => u.email === originalUser.email
        );
        expect(foundUser).toBeDefined();
        expect(foundUser?.name).toBe(originalUser.name);
        expect(foundUser?.provider).toBe(originalUser.provider);
      });
    });
  });
});
